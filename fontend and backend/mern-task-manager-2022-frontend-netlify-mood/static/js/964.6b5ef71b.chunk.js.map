{"version":3,"file":"static/js/964.6b5ef71b.chunk.js","mappings":"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","sources":["APIRequest/APIRequest.js","components/profile/Profile.jsx","helper/FormHelper.js"],"sourcesContent":["import axios from \"axios\";\nimport { ErrorToast, SuccessToast } from \"../helper/FormHelper\";\nimport { HideLoader, ShowLoader } from \"../redux/state-slice/SettingSlice\";\nimport Store from \"../redux/store/Store\";\nimport {getToken, setEmail, setOTP, setToken, setUserDetails} from \"../helper/SessionHelper\";\nimport { SetCanceledTask, SetCompletedTask, SetNewTask, SetProgressTask } from \"../redux/state-slice/TaskSlice\";\nimport { SetSummary } from \"../redux/state-slice/SummarySlice\";\nimport { SetProfile } from \"../redux/state-slice/ProfileSlice\";\n\nconst AxiosHeader={headers:{\"token\":getToken()}}\n\nconst BaseUrl=\"https://mern-task-manager-apk-v1.herokuapp.com/api/v1\"\n\nexport function RegistrationRequest(email,firstName,lastName,mobile,password,photo){\n\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/registration\";\n\n    let postBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password,photo:photo}\n\n    return axios.post(URL,postBody).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            if(res.data['status']===\"fail\"){\n                if(res.data['data']['keyPattern']['email']===1){\n                    ErrorToast(\"Email Already Exist\")\n                    return false;\n                }\n                else{\n                    ErrorToast(\"Something Went Wrong\")\n                    return false;\n                }\n            }\n            else {\n                SuccessToast(\"Registration Success\")\n                return true;\n            }\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return  false;\n        }\n\n    }).catch((err)=>{\n        Store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\");\n        return false;\n    })\n}\n\n\nexport function LoginRequest(email,password){\n\n    Store.dispatch(ShowLoader())\n\n    let URL=BaseUrl+\"/login\";\n    let PostBody={\"email\":email,\"password\":password}\n    return axios.post(URL,PostBody).then((res)=>{\n        Store.dispatch(HideLoader())\n\n        if(res.status===200){\n\n            setToken(res.data['token']);\n            setUserDetails(res.data['data']);\n            SuccessToast(\"Login Success\")\n            return true;\n        }\n        else{\n            ErrorToast(\"Invalid Email or Password\")\n            return  false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n}\n\n\nexport function NewTaskRequest(title,description){\n\n    Store.dispatch(ShowLoader())\n\n    let URL=BaseUrl+\"/createTask\";\n    let PostBody={title:title,description:description,status:\"New\"}\n\n    return axios.post(URL,PostBody,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n\n        if(res.status===200){\n            SuccessToast(\"New Task Created\")\n            return true;\n        }else{\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n        \n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    })\n\n}\n\n\n\nexport function TaskListByStatus(Status){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/listTaskByStatus/\"+Status;\n    axios.get(URL,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            if(Status===\"New\"){\n                Store.dispatch(SetNewTask(res.data['data']))\n            }\n            else if(Status===\"Completed\"){\n                Store.dispatch(SetCompletedTask(res.data['data']))\n            }\n            else if(Status===\"Canceled\"){\n                Store.dispatch(SetCanceledTask(res.data['data']))\n            }\n            else if(Status===\"Progress\"){\n                Store.dispatch(SetProgressTask(res.data['data']))\n            }\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n    });\n}\n\n\n\nexport function SummaryRequest(){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/taskStatusCount\";\n    axios.get(URL,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            Store.dispatch(SetSummary(res.data['data']))\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n    });\n}\n\n\n\nexport function DeleteRequest(id){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/deleteTask/\"+id;\n    return axios.get(URL,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            SuccessToast(\"Delete Successful\")\n            return true;\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n}\n\n\n\nexport function UpdateStatusRequest(id,status){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/updateTaskStatus/\"+id+\"/\"+status;\n    return axios.get(URL,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            SuccessToast(\"Status Updated\")\n            return true;\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n}\n\n\nexport function GetProfileDetails(){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/profileDetails\";\n    axios.get(URL,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            Store.dispatch(SetProfile(res.data['data'][0]))\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n    });\n}\n\n\n\nexport function ProfileUpdateRequest(email,firstName,lastName,mobile,password,photo){\n\n    Store.dispatch(ShowLoader())\n\n    let URL=BaseUrl+\"/profileUpdate\";\n\n    let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password,photo:photo}\n    let UserDetails={email:email,firstName:firstName,lastName:lastName,mobile:mobile,photo:photo}\n\n    return axios.post(URL,PostBody,AxiosHeader).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n\n            SuccessToast(\"Profile Update Success\")\n            setUserDetails(UserDetails)\n\n            return true;\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return  false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n}\n\n\nexport function RecoverVerifyEmailRequest(email){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/RecoverVerifyEmail/\"+email;\n\n    return axios.get(URL).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            if(res.data['status']==='fail'){\n                ErrorToast(\"No User Found\");\n                return false;\n            }else{\n                setEmail(email);\n                SuccessToast(\"A 6 Digit Verification code has been sent to your email address\")\n                return true;\n            }\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n\n}\n\n\nexport function RecoverVerifyOTPRequest(email,OTP){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/RecoverVerifyOTP/\"+email+\"/\"+OTP;\n    return axios.get(URL).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            if(res.data['status']===\"fail\"){\n                ErrorToast(res.data['data']);\n                return false;\n            }\n            else{\n                setOTP(OTP)\n                SuccessToast(\"Code Verification Success\");\n                return true;\n            }\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n        return false;\n    });\n}\n\nexport function RecoverResetPassRequest(email,OTP,password){\n    Store.dispatch(ShowLoader())\n    let URL=BaseUrl+\"/RecoverResetPass/\";\n\n    let postBody={email:email,OTP:OTP,password:password}\n\n    return axios.post(URL,postBody).then((res)=>{\n        Store.dispatch(HideLoader())\n        if(res.status===200){\n            if(res.data['status']==='fail'){\n                ErrorToast(res.data['data'])\n                return false;\n            }else{\n                setOTP(OTP)\n                SuccessToast(\"New Password Created\");\n                return true;\n            }\n        }\n        else{\n            ErrorToast(\"Something Went Wrong\")\n            return false\n        }\n    }).catch((err)=>{\n        ErrorToast(\"Something Went Wrong\")\n        Store.dispatch(HideLoader())\n    });\n\n}","import React, { useEffect, useRef } from 'react'\nimport { GetProfileDetails, ProfileUpdateRequest, } from '../../APIRequest/APIRequest'\nimport { useSelector } from 'react-redux';\nimport { ErrorToast, IsEmail, IsEmpty, IsMobile, getBase64 } from '../../helper/FormHelper';\nimport {useNavigate} from \"react-router-dom\";\n\nconst Profile = () => {\n\n  let emailRef,firstNameRef,lastNameRef,mobileRef,passwordRef,userImgRef,userImgView=useRef();\n\n  useEffect(()=>{\n    GetProfileDetails();\n  },[])\n\n  const ProfileData=useSelector((state)=>state.profile.value);\n\n  let navigate=useNavigate();\n    \n    \n    const PreviewImage = () => {\n        let ImgFile = userImgRef.files[0];\n        getBase64(ImgFile).then((base64Img)=>{\n            userImgView.src=base64Img;\n        })\n    }\n\n    \n    \n    const UpdateMyProfile = () => {\n        let email=emailRef.value;\n        let firstName=firstNameRef.value;\n        let lastName=lastNameRef.value;\n        let mobile=mobileRef.value;\n        let password= passwordRef.value;\n        let photo=userImgView.src\n\n        if(IsEmail(email)){\n            ErrorToast(\"Valid Email Address Required !\")\n        }\n        else if(IsEmpty(firstName)){\n            ErrorToast(\"First Name Required !\")\n        }\n        else if(IsEmpty(lastName)){\n            ErrorToast(\"Last Name Required !\")\n        }\n        else if(!IsMobile(mobile)){\n            ErrorToast(\"Valid Mobile  Required !\")\n        }\n        else if(IsEmpty(password)){\n            ErrorToast(\"Password Required !\")\n        }\n        else{\n            ProfileUpdateRequest(email,firstName,lastName,mobile,password,photo).then((result)=>{\n                if(result===true){\n                    navigate(\"/\");\n                }\n            })\n        }\n    }\n\n  return (\n        <div className=\"container\">\n          <div className=\"row d-flex justify-content-center\">\n            <div className=\"col-md-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"container-fluid\">\n                            <img  ref={(input)=>userImgView=input} className=\"icon-nav-img-lg\" src={ProfileData['photo']} alt=\"\"/>\n                            <hr/>\n                            <div className=\"row\">\n                              <div className=\"col-4 p-2\">\n                                  <label>Profile Picture</label>\n                                  <input onChange={PreviewImage}  ref={(input)=>userImgRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"file\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <label>Email Address</label>\n                                  <input key={Date.now()} defaultValue={ProfileData['email']}  readOnly={true}  ref={(input)=>emailRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <label>First Name</label>\n                                  <input  key={Date.now()} defaultValue={ProfileData['firstName']} ref={(input)=>firstNameRef=input} placeholder=\"First Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <label>Last Name</label>\n                                  <input key={Date.now()} defaultValue={ProfileData['lastName']}  ref={(input)=>lastNameRef=input} placeholder=\"Last Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <label>Mobile</label>\n                                  <input key={Date.now()} defaultValue={ProfileData['mobile']} ref={(input)=>mobileRef=input} placeholder=\"Mobile\" className=\"form-control animated fadeInUp\" type=\"mobile\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <label>Password</label>\n                                  <input key={Date.now()} defaultValue={ProfileData['password']}  ref={(input)=>passwordRef=input} placeholder=\"User Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\n                              </div>\n                              <div className=\"col-4 p-2\">\n                                  <button onClick={UpdateMyProfile}  className=\"btn w-100 float-end btn-primary animated fadeInUp\">Update</button>\n                              </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n    );\n}\n\nexport default Profile\n","import cogoToast from 'cogo-toast';\n\nlet EmailRegx = /\\S+@\\S+\\.\\S+/;\nlet MobileRegx = /(^(\\+88|0088)?(01){1}[3456789]{1}(\\d){8})$/;\n\nclass FormHelper {\n\n    IsEmpty(value) {\n        return value.length === 0;\n    }\n\n    IsMobile(value){\n        return MobileRegx.test(value);\n    }\n\n    IsEmail(value) {\n        return !EmailRegx.test(value);\n    }\n\n    ErrorToast(msg) {\n        cogoToast.error(msg, { position: \"top-right\" });\n    }\n    SuccessToast(msg) {\n        cogoToast.success(msg, { position: \"top-right\" });\n    }\n\n    getBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n        });\n    }\n\n}\n\nexport const{\n    IsEmpty,\n    IsMobile,\n    IsEmail,\n    ErrorToast,\n    SuccessToast,\n    getBase64\n}=new FormHelper();"],"names":["AxiosHeader","headers","getToken","BaseUrl","RegistrationRequest","email","firstName","lastName","mobile","password","photo","Store","ShowLoader","postBody","axios","then","res","HideLoader","status","data","ErrorToast","SuccessToast","catch","err","LoginRequest","PostBody","setToken","setUserDetails","NewTaskRequest","title","description","TaskListByStatus","Status","URL","SetNewTask","SetCompletedTask","SetCanceledTask","SetProgressTask","SummaryRequest","SetSummary","DeleteRequest","id","UpdateStatusRequest","GetProfileDetails","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","emailRef","firstNameRef","lastNameRef","mobileRef","passwordRef","userImgRef","userImgView","useRef","useEffect","ProfileData","useSelector","state","profile","value","navigate","useNavigate","className","ref","input","src","alt","onChange","ImgFile","files","getBase64","base64Img","placeholder","type","defaultValue","readOnly","Date","now","onClick","IsEmail","IsEmpty","IsMobile","result","EmailRegx","MobileRegx","FormHelper","length","test","msg","cogoToast","position","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error"],"sourceRoot":""}